<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-4.2.xsd 
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-4.2.xsd
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-4.2.xsd 
	http://www.springframework.org/schema/util  
    http://www.springframework.org/schema/util/spring-util-4.2.xsd">
	<context:component-scan base-package="com" />
	
	<bean id="roleAdminAuthGenerator" class="com.security.RoleAdminAuthGenerator" />
	
	<bean id="simpleAuthenticator" class="com.security.CustomizeUsrPwdAuthenticator" />
	
	<bean id="formClient" class="com.security.CustomizeFormClient">
		<constructor-arg name="loginUrl" value="/SpringPac4j/login.do" />
		<constructor-arg name="usernamePasswordAuthenticator" ref="simpleAuthenticator" />
	</bean>
	
	<bean id="oauth2Client" class="com.security.oauth2.CustomizeOAuth20Client">
		<constructor-arg name="key" value="c1ebe466-1cdc-4bd3-ab69-77c3561b9dee" />
		<constructor-arg name="secret" value="d8346ea2-6017-43ed-ad68-19c0f971738b" />
		<property name="authUrl" value="http://www.oauth2.com/Oauth2/authorize.do" />
		<property name="tokenUrl" value="http://www.oauth2.com/Oauth2/getToken.do" />
		<property name="profileUrl" value="http://www.oauth2.com/Oauth2/getResource.do" />
		<property name="logoutUrl" value="http://www.oauth2.com/Oauth2/logout.do?url=http://www.oauth2.com/SpringPac4j/login.do" />
		<property name="scope" value="user" />
		<property name="profileAttrs">
			<util:map>
				<entry key="username" value="username" />
			</util:map>
		</property>
	</bean>
	
	<bean id="clients" class="org.pac4j.core.client.Clients">
		<constructor-arg name="callbackUrl" value="/SpringPac4j/callback" />
		<constructor-arg name="clients">
			<list>
				<ref bean="formClient" />
				<ref bean="oauth2Client" />
			</list>
		</constructor-arg>
	</bean>
	
	<bean id="adminRoleAuthorizer" class="org.pac4j.core.authorization.authorizer.RequireAnyRoleAuthorizer">
        <constructor-arg name="roles" value="ROLE_ADMIN" />
    </bean>
    
    <bean id="customizeAuthorizer" class="com.security.CustomizeAuthorizer" />
    
    <bean id="config" class="org.pac4j.core.config.Config">
        <constructor-arg name="clients" ref="clients" />
        <constructor-arg name="authorizers">
            <map>
                <entry key="admin" value-ref="adminRoleAuthorizer" />
                <entry key="custom" value-ref="customizeAuthorizer" />
            </map>
        </constructor-arg>
    </bean>
    
    <bean name="callbackFilter" class="io.buji.pac4j.filter.CallbackFilter">
    	<property name="config" ref="config" />
		<property name="multiProfile" value="true" />
		<property name="defaultUrl" value="/SpringPac4j/index.do" />
	</bean>
    
    <bean name="formFilter" class="io.buji.pac4j.filter.SecurityFilter">
		<property name="config" ref="config" />
		<property name="clients" value="CustomizeFormClient" />
	</bean>
	
	<bean name="oauth2Filter" class="io.buji.pac4j.filter.SecurityFilter">
		<property name="config" ref="config" />
		<property name="clients" value="CustomizeOAuth20Client" />
	</bean>
	
	<!-- 加载配置属性文件 -->
	<context:property-placeholder ignore-unresolvable="true" location="classpath:application.properties" />
	
	<bean id="clientsRealm" class="io.buji.pac4j.realm.Pac4jRealm" />
	
	<!-- 用户授权信息Cache, 采用EhCache -->
	<bean id="shiroEhcacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManager" ref="cacheManager" />
	</bean>
	<bean id="cacheManager"
		class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
		<property name="configLocation" value="classpath:ehcache-shiro.xml"></property>
	</bean>

	<!-- 指定本系统SESSIONID, 默认为: JSESSIONID 问题: 与SERVLET容器名冲突, 如JETTY, TOMCAT 等默认JSESSIONID, 
		当跳出SHIRO SERVLET时如ERROR-PAGE容器会为JSESSIONID重新分配值导致登录会话丢失! -->
	<bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<constructor-arg name="name" value="SHIROSSIONID" />
		<property name="httpOnly" value="true" />
		<property name="maxAge" value="-1" />
	</bean>
	
	<!-- session管理 -->
	<bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
		<property name="globalSessionTimeout" value="${session.timeout}" />
		<property name="sessionValidationInterval" value="${session.timeout}" />
		<property name="sessionValidationSchedulerEnabled" value="true" />
		<property name="sessionIdCookie" ref="sessionIdCookie" />
	</bean>
	
	<bean id="subjectFactory" class="io.buji.pac4j.subject.Pac4jSubjectFactory" />

	<!-- 安全管理器 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="clientsRealm" />
		<property name="subjectFactory" ref="subjectFactory" />
		<property name="sessionManager" ref="sessionManager" />
		<property name="cacheManager" ref="shiroEhcacheManager" />
	</bean>
	
	<!-- Shiro Filter -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		
		<property name="filters">
			<util:map>
				<entry key="form" value-ref="formFilter" />
				<entry key="oauth2" value-ref="oauth2Filter" />
				<entry key="callback" value-ref="callbackFilter" />
			</util:map>
		</property>

		<property name="filterChainDefinitions">
			<value>
				<!--session拦截配置 anno表示不拦截 -->
				/public/** = anon
				/login.do  = anon
				/callback  = callback
				/logout.do = anon
				/** = oauth2
			</value>
		</property>
	</bean>
	
	<!-- Shiro生命周期处理器 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

	<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager" />
		<property name="arguments" ref="securityManager" />
	</bean>
</beans>